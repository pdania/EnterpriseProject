//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientSide.RandomizerServer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RandomizerServer.IRandomizerService")]
    public interface IRandomizerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRandomizerService/AddUser", ReplyAction="http://tempuri.org/IRandomizerService/AddUserResponse")]
        string AddUser(DBModels.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRandomizerService/AddUser", ReplyAction="http://tempuri.org/IRandomizerService/AddUserResponse")]
        System.Threading.Tasks.Task<string> AddUserAsync(DBModels.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRandomizerService/GetAllUsers", ReplyAction="http://tempuri.org/IRandomizerService/GetAllUsersResponse")]
        DBModels.User[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRandomizerService/GetAllUsers", ReplyAction="http://tempuri.org/IRandomizerService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<DBModels.User[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRandomizerService/AddRequest", ReplyAction="http://tempuri.org/IRandomizerService/AddRequestResponse")]
        string AddRequest(System.Guid userGuid, DBModels.Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRandomizerService/AddRequest", ReplyAction="http://tempuri.org/IRandomizerService/AddRequestResponse")]
        System.Threading.Tasks.Task<string> AddRequestAsync(System.Guid userGuid, DBModels.Request request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRandomizerServiceChannel : ClientSide.RandomizerServer.IRandomizerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RandomizerServiceClient : System.ServiceModel.ClientBase<ClientSide.RandomizerServer.IRandomizerService>, ClientSide.RandomizerServer.IRandomizerService {
        
        public RandomizerServiceClient() {
        }
        
        public RandomizerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RandomizerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RandomizerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RandomizerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddUser(DBModels.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<string> AddUserAsync(DBModels.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public DBModels.User[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<DBModels.User[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public string AddRequest(System.Guid userGuid, DBModels.Request request) {
            return base.Channel.AddRequest(userGuid, request);
        }
        
        public System.Threading.Tasks.Task<string> AddRequestAsync(System.Guid userGuid, DBModels.Request request) {
            return base.Channel.AddRequestAsync(userGuid, request);
        }
    }
}
